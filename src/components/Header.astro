---
import { MENUS } from 'config'
import ThemeToggle from './ThemeToggle.astro'
import MenuToggle from './MenuToggle.astro'
import NavLink from './NavLink.astro'
---

<header id="header" class="font-fangyuan accent-black w-fit h-14 mt-5 px-6 mx-auto relative flex items-center justify-between gap-14 bg-header rd-full">
    <div class="flex-1">
        <a href="/" class="color-band">EMO</a>
    </div>
    
    <nav class="flex justify-end md:justify-center">
        <ul id="navLinks" class="op-0 absolute flex flex-col items-center bg-header gap-5 w-full pt-4 pb-5 left-0 top-[56px] rd-b-3xl md:position-unset md:flex-row md:gap-10 md:py-0 md:op-100 text-xl ">
            {MENUS.map((menu, index) => (
                <NavLink key={index} menu={menu} />
            ))}
        </ul>
    </nav>

    <div class="flex flex-1 justify-end text-xl gap-2">
        <ThemeToggle />
        <MenuToggle />
    </div>
</header>

<script>
    document.addEventListener("astro:page-load", () => {
        document.querySelector("#menuToggle")?.addEventListener('click', () => {
            document.querySelector("#menuToggle")?.classList.toggle('toggle-expanded')
            document.querySelector("#header")?.classList.toggle('header-expanded')
            document.querySelector("#navLinks")?.classList.toggle('expanded') 
        })

        const dropdownBtn = document.querySelectorAll(".dropdown-btn");
        const dropdown = document.querySelectorAll(".dropdown");
        const links = document.querySelectorAll(".dropdown a");

        function setAriaExpandedFalse() {
            dropdownBtn.forEach((btn) => btn.setAttribute("aria-expanded", "false"));
        }

        function closeDropdownMenu() {
            dropdown.forEach((drop) => {
                drop.classList.remove("active");
                drop.addEventListener("click", (e) => e.stopPropagation());
            });
        }


        dropdownBtn.forEach((btn) => {
            const btnBounds = btn.getBoundingClientRect()
            btn.addEventListener("click", function (e) {
                const dropdownIndex = e.currentTarget.dataset.dropdown;
                const dropdownElement = document.getElementById(dropdownIndex);
                const dropdownBounds = dropdownElement?.getBoundingClientRect()

                const left = btnBounds.width / 2 - dropdownBounds.width / 2 - 8

                dropdownElement?.classList.toggle("active");
                dropdownElement?.setAttribute("style", `left: ${left}px`)
                dropdown.forEach((drop) => {
                    if (drop.id !== btn.dataset["dropdown"]) {
                        drop.classList.remove("active");
                    }
                });
                e.stopPropagation();
            });
        });

        links.forEach((link) =>
            link.addEventListener("click", () => {
                closeDropdownMenu();
                setAriaExpandedFalse();
            })
        );

        document.documentElement.addEventListener("click", () => {
            closeDropdownMenu();
            setAriaExpandedFalse();
        });

        document.addEventListener("keydown", (e) => {
            if (e.key === "Escape") {
                closeDropdownMenu();
                setAriaExpandedFalse();
            }
        });

    })
</script>

<style>
@media screen and (max-width: 768px) {
    #header {
        margin-top: 0px;
        margin-left: 0px;
        margin-right: 0px;
        width: 100%;
        height: 80px;
        border-radius: 0px;
    }

    #navLinks {
        width: 100%;
        align-items: flex-start;
        padding-left: 24px;
        padding-right: 24px;
        border-radius: 2px;
        z-index: 9999;
    }
}

.expanded {
    opacity: 1;
}
</style>